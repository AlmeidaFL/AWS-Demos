AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Demo - REsT vs HTTP API Gateway

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/jwt-secret"

  LambdaMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: LambdaMessageFunction
      Runtime: nodejs18.x
      Handler: app.handler
      CodeUri: ./lambda/
      MemorySize: 128
      Timeout: 5
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        MyHttpApiHelloEvent:
          Type: HttpApi
          Properties:
            Path: /hello/{name}
            Method: GET
            ApiId: !Ref HttpApi
            Auth:
              Authorizer: LambdaAuth
        MyHttpApiSearchEvent:
          Type: HttpApi
          Properties:
            Path: /search
            Method: GET
            ApiId: !Ref HttpApi
        MyRestApiHelloEvent:
          Type: Api
          Properties:
            Path: /hello/{name}
            Method: GET
            RestApiId: !Ref RestApi
            Auth:
              ApiKeyRequired: true
        MyRestApiSearchEvent:
          Type: Api
          Properties:
            Path: /search
            Method: GET
            RestApiId: !Ref RestApi
  
  LambdaAuthorizer:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: LambdaAuthorizer
      Runtime: nodejs18.x
      Handler: authorizer.handler
      CodeUri: ./auth/
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          JWT_SECRET_PARAM: "jwt-secret"

  LambdaAuthorizerInvokeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: InvokeLambdaAuthorizer
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt LambdaAuthorizer.Arn

  RestApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: RestApi
      StageName: prod
      EndpointConfiguration: REGIONAL

  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Name: HttpApi
      StageName: $default
      Auth:
        Authorizers:
          LambdaAuth:
            FunctionArn: !GetAtt LambdaAuthorizer.Arn
            FunctionInvokeRole: !GetAtt LambdaAuthorizerInvokeRole.Arn
            Identity:
              Headers:
                - Authorization
            AuthorizerPayloadFormatVersion: "2.0"

  MyUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      UsagePlanName: DemoUsagePlan
      Description: "Usage plan to control throttling and quote"
      ApiStages:
        - ApiId: !Ref RestApi
          Stage: !Ref RestApi.Stage
      Throttle:
        RateLimit: 10
        BurstLimit: 2
      Quota:
        Limit: 5
        Period: MONTH
    DependsOn: RestApi
  
  MyApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Enabled: true
      Name: DemoApiKey
  
  MyUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref MyApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref MyUsagePlan

Outputs:
  RestApiHelloUrl:
    Description: "Invoke Hello"
    Value: !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/hello/{name}"
  RestApiSearchUrl:
    Description: "Invoke Search"
    Value: !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/search"
  
  HttpApiHelloUrl:
    Description: "Invoke Hello"
    Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/hello/{name}"
  HttpApiSearchUrl:
    Description: "Invoke Search"
    Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/search"

  ApiKeyValue:
    Description: Api Key Id of Rest Api
    Value: !Ref MyApiKey