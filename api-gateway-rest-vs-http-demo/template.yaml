AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Demo - REsT vs HTTP API Gateway

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  LambdaMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: LambdaMessageFunction
      Runtime: nodejs18.x
      Handler: app.handler
      CodeUri: ./lambda/
      MemorySize: 128
      Timeout: 5
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        MyHttpApiEvent:
          Type: HttpApi
          Properties:
            Path: /hello/{name}
            Method: GET
            ApiId: !Ref HttpApi
        MyRestApiEvent:
          Type: Api
          Properties:
            Path: /hello/{name}
            Method: GET
            RestApiId: !Ref RestApi

  RestApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: RestApi
      StageName: prod
      EndpointConfiguration: REGIONAL

  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Name: HttpApi
      StageName: $default

Outputs:
  RestApiUrl:
    Description: "Invoke URL for Rest API"
    Value: !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/hello/{name}"
  
  HttpApiUrl:
    Description: "Invoke URL for HTTP API"
    Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/hello/{name}"